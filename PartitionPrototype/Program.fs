module Program
(*
the idea is to make an automatically suggesting thing
the thing automatically suggests syntactically correct syntax to continue the expression which is the program
what we need:

a correct type specificationn for metacasanova
a way of suggesting the next part of an expression based on earlier input, with the help of the type specification
being able to create and run the code generated by the tree structure
(optional)windows forms rectangles for containing information that you typed in and its suggestions
(optional)a SMALL parser for parsing words and suggesting the correct word in the case of a type
*)
type Type = string

type DataExpression = List<Type> * string * List<Type> * Type * Type
//                    BeforeParams-Name-----AfterParams-DataType-ReturnType

type FuncExpression = List<Type> * string * List<Type> * Type
//                    BeforeParams-Name-----AfterParams--DataType
type Premise = List<Type> * string * List<Type> * List<Type>
//             BeforeParams-Name-----AfterParams--ReturnExpr
type Proposition = Premise * List<Premise>
//                 MainProposition-Premise(s)

type Expression =
  | DataExpr of DataExpression
  | FuncExpr of FuncExpression
  | Premise of Proposition
//  | Import of string

[<EntryPoint>]
let main args =
  


  0